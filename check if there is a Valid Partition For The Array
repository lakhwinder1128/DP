2369. Check if There is a Valid Partition For The Array
User Accepted:3724
User Tried:6280
Total Accepted:3870
Total Submissions:14654
Difficulty:Medium
You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.

We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:

The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
Return true if the array has at least one valid partition. Otherwise, return false.

 

Example 1:

Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].
This partition is valid, so we return true.
Example 2:

Input: nums = [1,1,1,2]
Output: false
Explanation: There is no valid partition for this array.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 106

C++	
+2
1
class Solution {
2
public:
3
      bool solve(vector<int>&nums,int ind,vector<int>&dp){
4
          int n=nums.size();
5
                if(ind==nums.size())return true;
6
          if(dp[ind]!=-1)return dp[ind];
7
          int rem=n-ind;            // no of elements left after  partition
8
          if(rem<2)return dp[ind]=false;
9
          else if(rem==2){
10
               if(nums[ind]==nums[ind+1])return dp[ind]=true;
11
               else return dp[ind]=false;
12
          }
13
          else {
14
                   if(nums[ind]==nums[ind+1]){
15
                      if(solve(nums,ind+2,dp))return dp[ind]=true;
16
                   }
17
              if(nums[ind]==nums[ind+1]  &&  nums[ind]==nums[ind+2]){
18
â€‹
19
                    if(solve(nums,ind+3,dp))return dp[ind]=true;
20
              }
21
              if(nums[ind+1]==nums[ind]+1  &&  nums[ind]+2==nums[ind+2]){
22
                         if(solve(nums,ind+3,dp))return dp[ind]=true;
23
              }
24
              
25
          }
26
          return dp[ind]=false;
27
}
28
    bool validPartition(vector<int>& nums) {
29
        vector<int>dp(nums.size(),-1);
30
        return solve(nums,0,dp);
31
    }
32
};
