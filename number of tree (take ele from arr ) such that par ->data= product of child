  int numFactoredBinaryTrees(vector<int>& arr) {
        long long ans=0;
        int mod=pow(10,9)+7;
        unordered_map<int,long long>mp,ways;
        for(int i=0;i<arr.size();i++){
             mp[arr[i]]++;
          
        }
      sort(arr.begin(),arr.end());
        for(int i=0;i<arr.size();i++){   
                       ways[arr[i]]=1;                       // we want product as arr[i]
             for(int j=0;j<i;j++){
                    
                       int t=arr[i]/arr[j];
                       int rem=arr[i]%arr[j];
                    if(rem==0&&mp.find(t)!=mp.end()){
                  
                        ways[arr[i]]=ways[arr[i]]+ways[arr[j]]*ways[t];
                        ways[arr[i]]%=mod;
                 
                           }
            
             }
            
          
            
        }
        for(auto i=ways.begin();i!=ways.end();i++){
             cout<<i->first<<" "<<i->second<<endl;
            ans+=i->second;
            ans=ans%mod;
            
        }
        return ans;
    }
