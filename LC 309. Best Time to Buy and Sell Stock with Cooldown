 int f(vector<int>&prices,int ind,int buy, vector<vector<int>>&dp){
        int n=prices.size();
        if(ind>=n)return 0;
        if(dp[ind][buy]!=-1)return dp[ind][buy];
        if(buy){
            return dp[ind][buy]=max(-prices[ind]+f(prices,ind+1,0,dp),f(prices,ind+1,1,dp));
        }
        else return dp[ind][buy]=max(prices[ind]+f(prices,ind+2,1,dp),f(prices,ind+1,0,dp));
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        return f(prices,0,1,dp);
    }
    
    //tabulation
    
        int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+2,vector<int>(2,0));
      
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                 if(buy){
                     dp[ind][buy]=max(-prices[ind]+dp[ind+1][0],dp[ind+1][1]);
                        }
                      else  dp[ind][buy]=max(prices[ind]+dp[ind+2][1],dp[ind+1][0]);
            }
        }
        return dp[0][1];
    }
    
    ///space optimisation
      int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int>ahead1(2,0),ahead2(2,0),cur(2,0);
        
        for(int ind=n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                 if(buy){
                     cur[buy]=max(-prices[ind]+ahead1[0],ahead1[1]);
                        }
                      else  cur[buy]=max(prices[ind]+ahead2[1],ahead1[0]);
            }
             ahead2=ahead1;
            ahead1=cur;
           
        }
        return cur[1];
    }
    
