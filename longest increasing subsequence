 //////////////////////////////  recursion + memoisation ///////////////////////////
 int solve(vector<int>&nums,int n,int ind,int prev,vector<vector<int>>&dp){
           if(ind==n)return 0;
        if(dp[ind][prev+1]!=-1)return dp[ind][prev+1];
          int nottake=solve(nums,n,ind+1,prev,dp);
        int take=0;
        if(prev==-1||nums[ind]>nums[prev])take=solve(nums,n,ind+1,ind,dp)+1;
        int len=max(take,nottake);
        return dp[ind][prev+1]=len;
}
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
         vector<vector<int>>dp(n,vector<int>(n+1,-1));
        
        return solve(nums,n,0,-1,dp);
    }
    
    
    ////////////////////////////////////////using binary search lower bound O(nlogn) time complexity best solution ////////////////
     int lengthOfLIS(vector<int>& nums) {
           int n=nums.size();

        vector<int>temp;
        temp.push_back(nums[0]);
         int length=1;
        for(int i=1;i<n;i++){
          if(nums[i]>temp.back()){
           temp.push_back(nums[i]);
              length++;
          }
            else{

                int ind=lower_bound(temp.begin(),temp.end(),nums[i])-temp.begin();
                temp[ind]=nums[i];
             }
        }
         return length;
    }
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int longestSubsequence(int n, int a[])
    {
     vector<int>v;
       v.push_back(a[0]);
       for(int i=1;i<n;i++){
           int ind=lower_bound(v.begin(),v.end(),a[i])-v.begin();
           if(ind>=v.size())v.push_back(a[i]);
           else v[ind]=a[i];
       }
       return v.size();
}
