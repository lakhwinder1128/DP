 //////////////////////////////  recursion + memoisation ///////////////////////////
 int solve(vector<int>&nums,int n,int ind,int prev,vector<vector<int>>&dp){
           if(ind==n)return 0;
        if(dp[ind][prev+1]!=-1)return dp[ind][prev+1];
          int nottake=solve(nums,n,ind+1,prev,dp);
        int take=0;
        if(prev==-1||nums[ind]>nums[prev])take=solve(nums,n,ind+1,ind,dp)+1;
        int len=max(take,nottake);
        return dp[ind][prev+1]=len;
}
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
         vector<vector<int>>dp(n,vector<int>(n+1,-1));
        
        return solve(nums,n,0,-1,dp);
    }
    
    
    /////////////////////////////////////////
