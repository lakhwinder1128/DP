/////////memoization////////////
  int f(int ind, int amount,vector<int>&coins,vector<vector<int>>&dp){
        if(ind<0)return 1e9;
        if(ind==0){
            if(amount%coins[0]==0)return amount/coins[0];
            else return 1e9;
        }
        if(dp[ind][amount]!=-1)return dp[ind][amount];
        int take=1e9;
       if(amount>=coins[ind]) take=f(ind,amount-coins[ind],coins,dp)+1;
        int nottake=f(ind-1,amount,coins,dp);
        return dp[ind][amount]= min(take,nottake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        int ans=f(n-1,amount,coins,dp);
        if(ans==1e9)return -1;
        else return ans;
       
    }
    ////tabulation
    
     
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,0));
        
        for(int i=0;i<=amount;i++){
           if(i%coins[0]==0) dp[0][i]=i/coins[0];
            else dp[0][i]=1e9;
        }
        
        for(int i=1;i<n;i++){
            for(int j=0;j<=amount;j++){
                    int take=1e9;
       if(j>=coins[i]) take=dp[i][j-coins[i]]+1;
        int nottake=dp[i-1][j];
        dp[i][j]= min(take,nottake);
            }
        }
        
       
        int ans=dp[n-1][amount];
        if(ans==1e9)return -1;
        else return ans;
       
    }
    
    
