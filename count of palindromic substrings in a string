    int countSubstrings(string s) {
        int n=s.size();
        int dp[n][n];
        for(int start=0;start<n;start++){
         for(int end=0;end<n;end++){
              if(start==end)dp[start][end]=1; // when start ==end (single alphabet is a palindrome)
              else if(end-start+1==2&&s[start]==s[end])dp[start][end]=1;
             else dp[start][end]=0;
          }
        }
        
         for(int i=2;i<n;i++){
             int start=0,end=i;                 //checking string of size of 3 then 4 then 5 then 6 and so on ..
         while(end>=start&&end<n&&start<n){ // dont use nested for loop here because it 
                                           //will traverese horizontal level by level ,but we want 
                                            // diagonal traversing.
            
             if(end-start+1>=3){
               if(s[start]!=s[end])dp[start][end]=0;
                 else dp[start][end]=dp[start+1][end-1];
                 start++;
                 end++;
           
           }
             
          }
        }
        
        int count=0;
        for(int start=0;start<n;start++){
         for(int end=0;end<n;end++){
             // cout<<dp[start][end]<<" ";
             if(end>=start&&dp[start][end]==1)count++;
             
          }
            //cout<<endl;
        }
        
        return count;
    }
