//      int dp[100001][2][3];
//     int f(vector<int>&prices,int ind,int buy,int cap){
//         int n=prices.size();
//         if(cap==0||ind==n)return 0;
//         if(dp[ind][buy][cap]!=-1)return dp[ind][buy][cap];
//         if(buy){
//             return dp[ind][buy][cap] =max(-prices[ind]+f(prices,ind+1,0,cap),f(prices,ind+1,1,cap));
//         }
//         else return dp[ind][buy][cap]= max(prices[ind]+f(prices,ind+1,1,cap-1),f(prices,ind+1,0,cap));
        
//     }
    int maxProfit(vector<int>& prices) {
        //int ind=0,buy=1,cap=2;
       int n=prices.size();
      //  vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        vector<vector<int>>ahead(2,vector<int>(3,0)),cur(2,vector<int>(3,0));
       // memset(dp,0,sizeof(dp));
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=1;j++){
                for(int c=1;c<=2;c++){
                     if(j){
                     cur[j][c] =max(-prices[i]+ahead[0][c],ahead[1][c]);
                           }
                      else  cur[j][c]= max(prices[i]+ahead[1][c-1],ahead[0][c]);
                     }
            }
            ahead=cur;
        }
        return cur[1][2];
    }
